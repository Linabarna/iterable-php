{
  "openapi" : "3.0.0",
  "servers" : [ {
    "url" : "https://api.iterable.com"
  } ],
  "info" : {
    "version" : "1.0.0",
    "title" : "Iterable API",
    "description" : "Iterable API",
    "contact" : {
      "email" : "idihya@webpick.info"
    },
    "termsOfService" : "https://iterable.com/terms-of-service/"
  },
  "tags" : [ {
    "name" : "In-app"
  }, {
    "name" : "SMS"
  }, {
    "name" : "campaigns"
  }, {
    "name" : "channels"
  }, {
    "name" : "commerce"
  }, {
    "name" : "email"
  }, {
    "name" : "events"
  }, {
    "name" : "experiments"
  }, {
    "name" : "export"
  }, {
    "name" : "lists"
  }, {
    "name" : "messageTypes"
  }, {
    "name" : "metadata"
  }, {
    "name" : "push"
  }, {
    "name" : "templates"
  }, {
    "name" : "users"
  }, {
    "name" : "webPush"
  }, {
    "name" : "webhooks"
  }, {
    "name" : "workflows"
  } ],
  "security" : [ {
    "apikey" : [ ]
  } ],
  "paths" : {
    "/api/messageTypes" : {
      "get" : {
        "tags" : [ "messageTypes" ],
        "summary" : "List message types",
        "description" : "List all message types within a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "messageTypes",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageTypesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/update" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user data",
        "description" : "Update user data or adds a user if none exists. Data is merged - missing fields are not deleted. Please note there is a soft limit (default: 1,000) on the number of unique fields users can have. Types of data fields must match the types sent in previous requests, across all data fields in the project.<br><b>Rate limit</b>: 500 requests/second, per project.",
        "operationId" : "updateUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiUserUpdateRequest"
              }
            }
          },
          "description" : "user object",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/byUserId" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by userId",
        "description" : "<b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/byUserId/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by userId",
        "description" : "Get a user by your custom userId. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserByUserId",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "userId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete user by userId",
        "description" : "Delete user by a userId. This will delete multiple users if they happen to share the same userId.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/forgotten" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get forgotten users in compliance with GDPR",
        "description" : "Get all user emails that are currently in the blacklist.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getForgottenUsers",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetForgottenUserEmailsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/bulkUpdate" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Bulk update user data",
        "description" : "Bulk update user data. This will add the data if it doesn't exist yet. Data will be merged; missing fields are not deleted. Changing emailListIds, unsubscribedChannelIds, messageTypeIds through this endpoint will <b>NOT</b> generate unsubscribe events. However, the bulkUpdateSubscription will generate unsubscribe events. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.<br>Note that bulk updates are processed separately from single-user calls (update, updateEmail, updateSubscriptions, etc). If the same user is modified using both bulk update and single-user calls made near the same time, the results may be inconsistent. It's important to use either only single-user calls or only bulk update calls around the same time for any given user.<br><b>Rate limit</b>: 10 requests/second, per project.",
        "operationId" : "bulkUpdateUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkUpdateUsersRequest"
              }
            }
          },
          "description" : "Users to update",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/updateSubscriptions" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user subscriptions",
        "description" : "Update user subscriptions. <b>NOTE</b>: Overwrites existing data if the field is provided and not null.",
        "operationId" : "updateSubscriptions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSubscriptionsRequest"
              }
            }
          },
          "description" : "Subscriptions to update",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/bulkUpdateSubscriptions" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Bulk update user subscriptions",
        "description" : "<b>WARNING</b>: This will overwrite (instead of merging) existing data if the provided fields are not null.",
        "operationId" : "bulkUpdateSubscriptions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkUpdateSubscriptionsRequest"
              }
            }
          },
          "description" : "Bulk subscriptions to update",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkUpdateSubscriptionsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/updateEmail" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Update user email",
        "description" : "Change a user's email address. All profile data and events will be migrated to the new email address.",
        "operationId" : "updateEmail",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateEmailRequest"
              }
            }
          },
          "description" : "Update a user's email. All profile data and events will be migrated.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/getFields" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get all user fields",
        "description" : "Get all user fields within a project. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserFields",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserFieldsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/registerDeviceToken" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Register a device token for push",
        "description" : "Register a device token for push. This will add the data if it doesn't exist yet. It will also update data fields on the device. Data will be merged; missing fields are not deleted. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.<br><b>Rate limit</b>: Not limited by default, but a sudden increase in the call rate by over 1000/sec may require us to set a rate limit for your API key. Please let us know if you expect a traffic spike.",
        "operationId" : "registerDeviceToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterDeviceTokenRequest"
              }
            }
          },
          "description" : "Request to register device",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/registerBrowserToken" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Register a browser token for web push",
        "description" : "",
        "operationId" : "registerBrowserToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterBrowserTokenRequest"
              }
            }
          },
          "description" : "Request to register browser",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/disableDevice" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Disable pushes to a mobile device",
        "description" : "Manually disable push notifications to a device until it comes online again.",
        "operationId" : "disableDevice",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DisableDeviceRequest"
              }
            }
          },
          "description" : "Request to disable device"
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/getSentMessages" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get messages sent to a user",
        "description" : "Get messages sent to a user by email address or user ID. Returns 10 by default, up to 1,000. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getSentMessages",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "user's email, either email or userId must be specified",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "user's userId, either email or userId must be specified",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "max number of messages to return (default: 10, max limit: 1000)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "only include messages from these campaigns",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            },
            "default" : "List.empty"
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "start date time (yyyy-MM-dd HH:mm:ss ZZ)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "end date time (yyyy-MM-dd HH:mm:ss ZZ)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "excludeBlastCampaigns",
          "in" : "query",
          "description" : "exclude results coming from blast campaigns (ignored if campaignId is set)",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "messageMedium",
          "in" : "query",
          "description" : "only include messages of this type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Email", "Push", "InApp", "SMS" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSentMessagesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/{email}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by email",
        "description" : "Get a user by their email address. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserByEmail",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a user by email",
        "description" : "Delete a specific user by email address. <b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "deleteUserByEmail",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/forget" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Forget a user in compliance with GDPR",
        "description" : "Add user to the forgotten users blacklist. Existing data is retained but new data for this user will be rejected.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "forget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRequest"
              }
            }
          },
          "description" : "user's email to be added to blacklist.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/unforget" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Unforget a user in compliance with GDPR",
        "description" : "Remove user from forgotten users blacklist. New data for this user will now be accepted. Previously deleted data is unrecoverable.<br><b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "unforget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRequest"
              }
            }
          },
          "description" : "user's email to be removed from blacklist.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/users/getByEmail" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by email",
        "description" : "<b>Rate limit</b>: 3 requests/second, per project.",
        "operationId" : "getUserByEmail2",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/email/viewInBrowser" : {
      "get" : {
        "tags" : [ "email" ],
        "summary" : "View a previously sent email",
        "description" : "View a rendered version of a previously sent email. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "viewInBrowser",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "user's email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "messageId",
          "in" : "query",
          "description" : "id of sent message",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/email/target" : {
      "post" : {
        "tags" : [ "email" ],
        "summary" : "Send an email to an email address",
        "description" : "Send an email to a specific email address. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "sendEmailToTarget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetEmailRequest"
              }
            }
          },
          "description" : "Recipient and email id",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List available tables",
        "description" : "",
        "operationId" : "list tables",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMetadataTablesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata/{table}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "List keys in a table",
        "description" : "",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "nextMarker",
          "in" : "query",
          "description" : "next result set id; returned by previous search if more hits exist",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "None"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Listing"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "metadata" ],
        "summary" : "Delete a table",
        "description" : "Asynchronous. Deletes the table. 200 response indicates a valid request that will be processed; table may not be deleted immediately. Use GET /api/metadata/{table} to verify completion.",
        "operationId" : "deleteMetadataTable",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/metadata/{table}/{key}" : {
      "get" : {
        "tags" : [ "metadata" ],
        "summary" : "Get the metadata value of a single key",
        "description" : "",
        "operationId" : "get",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MetadataWithProperties"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "No metadata at specified location"
          }
        }
      },
      "put" : {
        "tags" : [ "metadata" ],
        "summary" : "Create or replace metadata",
        "description" : "Asynchronous. Creates or replaces the item associated with the specified key. 200 response indicates a valid request that will be processed; updates may not be made immediately. Use GET /api/metadata/{table}/{key} to verify completion.",
        "operationId" : "put",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutMetadataRequest"
              }
            }
          },
          "description" : "Metadata properties",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "delete" : {
        "tags" : [ "metadata" ],
        "summary" : "Delete a single metadata key/value",
        "description" : "Asynchronous. Deletes the specified item from the table. 200 response indicates a valid request that will be processed; data may not be deleted immediately. Use GET /api/metadata/{table}/{key} to verify completion.",
        "operationId" : "deleteMetadataKey",
        "parameters" : [ {
          "name" : "table",
          "in" : "path",
          "description" : "Table name [Alphanumeric, case insensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "key",
          "in" : "path",
          "description" : "Metadata key [Alphanumeric, case sensitive]",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/webhooks" : {
      "get" : {
        "tags" : [ "webhooks" ],
        "summary" : "Get webhooks",
        "description" : "Get webhooks for a project.",
        "operationId" : "getWebhooks",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetWebhooksResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "post" : {
        "tags" : [ "webhooks" ],
        "summary" : "Update webhook",
        "description" : "",
        "operationId" : "updateWebhook",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiWebhookModel"
              }
            }
          },
          "description" : "Only the specified fields will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiWebhookResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/recurring/{id}/childCampaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get child campaigns of a recurring campaign",
        "description" : "Get child campaigns generated by a recurring campaign. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "child campaigns",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/metrics" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get metrics for campaigns",
        "description" : "Get metrics for a single campaign or multiple campaigns. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getCampaignMetrics",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "query",
          "description" : "Campaign(s) to export",
          "required" : true,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Export starting from (>=).  Accepted formats include YYYY-MM-DD and other ISO 8601 formats.",
          "required" : false,
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "2018-06-25"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Export ending at (<).  Accepted formats include YYYY-MM-DD and other ISO 8601 formats.",
          "required" : false,
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "2018-07-25"
          }
        }, {
          "name" : "useNewFormat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "List campaign metadata",
        "description" : "Get metadata about a specific campaign. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "campaigns",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/trigger" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Trigger a campaign",
        "description" : "Trigger a campaign given lists",
        "operationId" : "trigger campaign",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggerCampaignRequest"
              }
            }
          },
          "description" : "Trigger campaign",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/campaigns/create" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Create a campaign",
        "description" : "Create a new campaign",
        "operationId" : "create campaign",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCampaignRequest"
              }
            }
          },
          "description" : "Create campaign",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCampaignResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/sms/target" : {
      "post" : {
        "tags" : [ "SMS" ],
        "summary" : "Send SMS notification to user",
        "description" : "Send an SMS notification to a specific user. Note that this API is typically used for transactional messaging. Request data fields will override user profile data fields.A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "sendSMSToTarget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetSMSRequest"
              }
            }
          },
          "description" : "Recipient and email ID",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/workflows/triggerWorkflow" : {
      "post" : {
        "tags" : [ "workflows" ],
        "summary" : "Trigger a workflow",
        "description" : "Trigger a workflow. Triggering with a list is asynchronous. If a list trigger is in progress, it must finish before the same list can be triggered again for a particular workflow. The workflow stats may take several minutes to update if other workflows are running.",
        "operationId" : "triggerWorkflow",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TriggerWorkflowRequest"
              }
            }
          },
          "description" : "Trigger workflow request",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/channels" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "Get channels",
        "description" : "Get all message channels within the project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "channels",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChannelsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/push/target" : {
      "post" : {
        "tags" : [ "push" ],
        "summary" : "Send push notification to user",
        "description" : "Send a push notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "sendPushToTarget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetPushRequest"
              }
            }
          },
          "description" : "Recipient and email id",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/webPush/target" : {
      "post" : {
        "tags" : [ "webPush" ],
        "summary" : "Send web push notification to user",
        "description" : "Send a web push notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "sendWebPushToTarget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetWebPushRequest"
              }
            }
          },
          "description" : "Recipient and email id",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get lists",
        "description" : "Get all lists within a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getLists",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetListsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Create a static list",
        "description" : "Create a new static list.",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateListRequest"
              }
            }
          },
          "description" : "name",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/getUsers" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get users in a list",
        "description" : "Get all users within a list. <b>Rate limit</b>: 5 requests/minute, per project.",
        "operationId" : "getListUsers",
        "parameters" : [ {
          "name" : "listId",
          "in" : "query",
          "description" : "list id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/{listId}/size" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get count of users in list",
        "description" : "Get the number of users within a list. <b>Rate limit</b>: 5 requests/minute, per project.",
        "operationId" : "getListCount",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "list id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/subscribe" : {
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add subscribers to list",
        "description" : "Add specific subscribers to a list.",
        "operationId" : "subscribe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscribeRequest"
              }
            }
          },
          "description" : "email list id and list of emails",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/unsubscribe" : {
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Remove users from a list",
        "description" : "Remove specific users from a list.",
        "operationId" : "unsubscribe",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnsubscribeRequest"
              }
            }
          },
          "description" : "email list id and list of emails",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/lists/{listId}" : {
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete a static list",
        "description" : "Delete a static list by listId.",
        "operationId" : "deleteStaticList",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "list id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/inApp/getMessages" : {
      "get" : {
        "tags" : [ "In-app" ],
        "summary" : "Get in-app messages for user",
        "description" : "Get in-app messages for displaying to a user on mobile or web.",
        "operationId" : "getMessages",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "email of user to get messages for. Either email or userId must be specified",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "userId of user to get message for.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Number of messages to fetch",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiInAppMessagesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get templates",
        "description" : "Get templates for a project. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getTemplates",
        "parameters" : [ {
          "name" : "templateType",
          "in" : "query",
          "description" : "Only retrieve templates associated with this template type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Base", "Blast", "Triggered", "Workflow" ]
          }
        }, {
          "name" : "messageMedium",
          "in" : "query",
          "description" : "Only retrieve templates associated with this message medium",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Email", "Push", "InApp", "SMS" ]
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Get templates created at or after this date time (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Get templates created before this date time (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTemplatesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/getByClientTemplateId" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an email template by Client Template ID",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getByClientTemplateId",
        "parameters" : [ {
          "name" : "clientTemplateId",
          "in" : "query",
          "description" : "Client Template Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClientTemplateIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/email/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an email template by templateId",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getEmailTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiEmailTemplateModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/email/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create email template",
        "description" : "Create email template if it doesn't exist already, otherwise update all email templates which match the name provided.",
        "operationId" : "upsertEmailTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertEmailTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/email/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update email template",
        "description" : "",
        "operationId" : "updateEmailTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiEmailTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/push/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get a push template",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getPushTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiPushTemplateModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/push/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create a push template",
        "description" : "Create a push template if it doesn't exist, otherwise update all push templates which match the name provided.",
        "operationId" : "upsertPushTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertPushTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/push/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update push template",
        "description" : "",
        "operationId" : "updatePushTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiPushTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/sms/get" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get an SMS template",
        "description" : "<b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "getSMSTemplate",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "query",
          "description" : "Template ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "locale",
          "in" : "query",
          "description" : "Locale of content to get",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiSMSTemplateModel"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "404" : {
            "description" : "Content does not exit for specified locale"
          }
        }
      }
    },
    "/api/templates/sms/upsert" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Create an SMS template",
        "description" : "Create an SMS template if it doesn't exist yet, otherwise update all SMS templates which match the name provided.",
        "operationId" : "upsertSMSTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertSMSTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/templates/sms/update" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Update SMS template",
        "description" : "",
        "operationId" : "updateSMSTemplate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiSMSTemplateModel"
              }
            }
          },
          "description" : "Only the fields specified will be updated",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackBulk" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Bulk track events",
        "description" : "Events are created asynchronously and <b>processed separately from single event (non-bulk) endpoint</b>. Thus, if you need to make sure events are tracked in order, it is recommended that all of them are sent to the same endpoint (either bulk or non-bulk). <br /> Please note there is a soft limit (default is 8,000) on the number of unique fields a custom event can have. Types of data fields must match the types sent in previous requests, across all data fields in the project.<br/><b>Rate limit</b>: 10 requests/second, per project.",
        "operationId" : "trackBulk",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkTrackRequest"
              }
            }
          },
          "description" : "Events to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkTrackResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackWebPushClick" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track a web push click",
        "description" : "",
        "operationId" : "trackWebPushClick",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebPushClickEventRequest"
              }
            }
          },
          "description" : "Web Push click to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackPushOpen" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track a mobile push open",
        "description" : "",
        "operationId" : "trackPushOpen",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrackPushOpenRequest"
              }
            }
          },
          "description" : "Push open to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppOpen" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an in-app open",
        "description" : "",
        "operationId" : "trackInAppOpen",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InAppEventRequest"
              }
            }
          },
          "description" : "In-app open to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/trackInAppClick" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an in-app click",
        "description" : "",
        "operationId" : "trackInAppClick",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InAppClickRequest"
              }
            }
          },
          "description" : "In-app click to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/inAppConsume" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Consume an in-app notification",
        "description" : "",
        "operationId" : "inAppConsume",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InAppEventRequest"
              }
            }
          },
          "description" : "In-app notification to consume",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/{email}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get user events",
        "description" : "Get events for a specific user. <b>Rate limit</b>: 100 requests/second, per project.",
        "operationId" : "User events",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "Email of the user whose events you are retrieving.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of events to retrieve.  (Max is 200)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1,
            "maximum" : 200,
            "default" : 30
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetEventsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/events/track" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Track an event",
        "description" : "Events are created asynchronously and <b>processed separately from single event (non-bulk) endpoint</b>. Thus, if you need to make sure events are tracked in order, it is recommended that all of them are sent to the same endpoint (either bulk or non-bulk). <br/>Please note there is a soft limit (default is 8,000) on the number of unique fields a custom event can have. Types of data fields must match the types sent in previous requests, across all data fields in the project.<br/><b>Rate limit</b>: 2000 requests/second, per project.",
        "operationId" : "track",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrackRequest"
              }
            }
          },
          "description" : "Event to track",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/experiments/metrics" : {
      "get" : {
        "tags" : [ "experiments" ],
        "summary" : "Get metrics for experiments",
        "description" : "Get metrics for a single experiment or for multiple experiments. Note that we currently only support exporting email experiment metrics.",
        "operationId" : "getExperimentMetrics",
        "parameters" : [ {
          "name" : "experimentId",
          "in" : "query",
          "description" : "Experiment to export. Specify multiple experimentId query parameters to export multiple experiments.",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "Campaign whose experiments you want to export. Specify multiple campaignId query parameters to export multiple campaigns.",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "export starting from (>=)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "2018-06-25"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "export ending at (<=)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "2018-07-25"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentMetricsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/inApp/target" : {
      "post" : {
        "tags" : [ "In-app" ],
        "summary" : "Send an in-app notification to a user",
        "description" : "Send an in-app notification to a specific user. Request data fields will override user profile data fields. A reference to the user profile is provided via the 'profile' field, to help resolve field collisions.",
        "operationId" : "sendInAppToTarget",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TargetInAppRequest"
              }
            }
          },
          "description" : "Recipient and email id",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/export/data.csv" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export data to CSV",
        "description" : "Export campaign analytics data in CSV format. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.",
        "operationId" : "exportDataCsv",
        "parameters" : [ {
          "name" : "dataTypeName",
          "in" : "query",
          "description" : "data type name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "emailSend", "emailOpen", "emailClick", "hostedUnsubscribeClick", "emailComplaint", "emailBounce", "emailSendSkip", "pushSend", "pushOpen", "pushUninstall", "pushBounce", "pushSendSkip", "inAppSend", "inAppOpen", "inAppClick", "inAppSendSkip", "smsSend", "smsBounce", "smsReceived", "smsSendSkip", "webPushSend", "webPushClick", "webPushSendSkip", "emailSubscribe", "emailUnSubscribe", "purchase", "customEvent", "user" ]
          }
        }, {
          "name" : "range",
          "in" : "query",
          "description" : "date range, uses UTC time",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Today", "Yesterday", "BeforeToday", "All" ],
            "default" : "Today"
          }
        }, {
          "name" : "delimiter",
          "in" : "query",
          "description" : "CSV filter delimiter",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : ","
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "Export starting from (>=) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "Export ending at (<) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "omitFields",
          "in" : "query",
          "description" : "Fields to omit (comma separated)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "onlyFields",
          "in" : "query",
          "description" : "If non-empty, will only export these fields",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "default" : "List.empty"
          }
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "If provided, only export data from this campaign",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : "None"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/export/data.json" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export data to JSON",
        "description" : "Export campaign analytics data in JSON format, one entry per line. Use of either 'range' or 'startDateTime' and 'endDateTime' is required.<br/><b>Rate limit</b>: 4 requests/minute, per project.",
        "operationId" : "exportDataJson",
        "parameters" : [ {
          "name" : "dataTypeName",
          "in" : "query",
          "description" : "data type name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "emailSend", "emailOpen", "emailClick", "hostedUnsubscribeClick", "emailComplaint", "emailBounce", "emailSendSkip", "pushSend", "pushOpen", "pushUninstall", "pushBounce", "pushSendSkip", "inAppSend", "inAppOpen", "inAppClick", "inAppSendSkip", "smsSend", "smsBounce", "smsReceived", "smsSendSkip", "webPushSend", "webPushClick", "webPushSendSkip", "emailSubscribe", "emailUnSubscribe", "purchase", "customEvent", "user" ]
          }
        }, {
          "name" : "range",
          "in" : "query",
          "description" : "date range, uses UTC time",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Today", "Yesterday", "BeforeToday", "All" ],
            "default" : "Today"
          }
        }, {
          "name" : "startDateTime",
          "in" : "query",
          "description" : "export starting from (&gt;=) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endDateTime",
          "in" : "query",
          "description" : "export ending at (&lt;) (yyyy-MM-dd HH:mm:ss [ZZ])",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "omitFields",
          "in" : "query",
          "description" : "fields to omit (comma separated)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "onlyFields",
          "in" : "query",
          "description" : "if nonempty, will only export these fields",
          "required" : false,
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "default" : "List.empty"
          }
        }, {
          "name" : "campaignId",
          "in" : "query",
          "description" : "if provided, only export data from this campaign",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : " "
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/x-json-stream" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/export/userEvents" : {
      "get" : {
        "tags" : [ "export" ],
        "summary" : "Export user events",
        "description" : "Export all events in JSON format for a user. One event per line.",
        "operationId" : "exportUserEventsJson",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "email",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeCustomEvents",
          "in" : "query",
          "description" : "Include Custom Events",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/x-json-stream" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          },
          "429" : {
            "description" : "Rate limit exceeded"
          }
        }
      }
    },
    "/api/commerce/updateCart" : {
      "post" : {
        "tags" : [ "commerce" ],
        "summary" : "Update user 'shoppingCartItems'",
        "description" : "Update the 'shoppingCartItems' field on the user profile with shopping cart items. User profile is updated if it already exists (created otherwise) via the user field. Types of data fields must match the types sent in previous requests, across all data fields in the project.",
        "operationId" : "updateCart",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCartRequest"
              }
            }
          },
          "description" : "state of the cart",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    },
    "/api/commerce/trackPurchase" : {
      "post" : {
        "tags" : [ "commerce" ],
        "summary" : "Track a purchase",
        "description" : "Track purchase events. 'shoppingCartItems' field on the user profile is cleared. User profile is also updated if it already exists (created otherwise) using the user request field. Also, note that there is a soft limit on the number of unique fields a user can have (default is 1,000). Types of data fields must match the types sent in previous requests, across all data fields in the project.",
        "operationId" : "trackPurchase",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrackPurchaseRequest"
              }
            }
          },
          "description" : "purchase data",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IterableApiResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters"
          },
          "401" : {
            "description" : "Invalid API key"
          }
        }
      }
    }
  },
  "components" : {
    "securitySchemes" : {
      "apikey" : {
        "type" : "apiKey",
        "name" : "Api_Key",
        "in" : "header"
      }
    },
    "schemas" : {
      "MessageTypeDetails" : {
        "type" : "object",
        "required" : [ "channelId", "id", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "channelId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Channel that this message type belongs to"
          }
        }
      },
      "MessageTypesResponse" : {
        "type" : "object",
        "required" : [ "messageTypes" ],
        "properties" : {
          "messageTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageTypeDetails"
            }
          }
        }
      },
      "IterableApiResponse" : {
        "type" : "object",
        "required" : [ "code", "msg" ],
        "properties" : {
          "msg" : {
            "type" : "string",
            "description" : "Response description"
          },
          "code" : {
            "type" : "string",
            "enum" : [ "Success", "BadApiKey", "BadParams", "BadJsonBody", "QueueEmailError", "GenericError", "InvalidEmailAddressError", "DatabaseError", "EmailAlreadyExists" ]
          },
          "params" : {
            "type" : "object",
            "description" : "Additional info"
          }
        }
      },
      "ApiUserUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Data fields to store in the user profile"
          },
          "userId" : {
            "type" : "string",
            "description" : "Optional userId, typically your database generated id. Either email or userId must be specified."
          },
          "preferUserId" : {
            "type" : "boolean",
            "example" : false,
            "description" : "Create a new user with the specified userId if the user does not exist yet."
          },
          "mergeNestedObjects" : {
            "type" : "boolean",
            "example" : false,
            "description" : "Merge top level objects instead of overwriting (default: false). e.g. if user profile has data: {mySettings:{mobile:true}} and change contact field has data: {mySettings:{email:true}}, the resulting profile: {mySettings:{mobile:true,email:true}}"
          }
        }
      },
      "ApiUser" : {
        "type" : "object",
        "required" : [ "email" ],
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object"
          },
          "userId" : {
            "type" : "string"
          },
          "mergeNestedObjects" : {
            "type" : "number"
          }
        }
      },
      "UserResponse" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/ApiUser"
          }
        }
      },
      "GetForgottenUserEmailsResponse" : {
        "type" : "object",
        "required" : [ "emails" ],
        "properties" : {
          "emails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ListResponse" : {
        "type" : "object",
        "required" : [ "failCount", "successCount" ],
        "properties" : {
          "successCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "failCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invalidEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "invalidUserIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkUpdateUsersRequest" : {
        "type" : "object",
        "required" : [ "users" ],
        "properties" : {
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OptionalApiUser"
            }
          }
        }
      },
      "OptionalApiUser" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "An email must be set unless a profile already exists with a userId set. In which case, a lookup from userId to email is performed."
          },
          "dataFields" : {
            "type" : "object"
          },
          "userId" : {
            "type" : "string",
            "description" : "Optional userId, typically your database generated id. Either email or userId must be specified."
          },
          "preferUserId" : {
            "type" : "boolean",
            "example" : false,
            "description" : "Create a new user with the specified userId if the user does not exist yet."
          },
          "mergeNestedObjects" : {
            "type" : "boolean",
            "example" : false,
            "description" : "Merge top level objects instead of overwriting (default: false). e.g. if user profile has data: {mySettings:{mobile:true}} and change contact field has data: {mySettings:{email:true}}, the resulting profile: {mySettings:{mobile:true,email:true}}"
          }
        }
      },
      "UpdateSubscriptionsRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "string"
          },
          "emailListIds" : {
            "type" : "array",
            "description" : "Lists that a user is subscribed to",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "unsubscribedChannelIds" : {
            "type" : "array",
            "description" : "Email channel ids to unsubscribe from",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "unsubscribedMessageTypeIds" : {
            "type" : "array",
            "description" : "Individual message type ids to unsubscribe. This will not unsubscribe from the associated channel.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Campaign to attribute unsubscribes"
          },
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Template to attribute unsubscribes"
          }
        }
      },
      "BulkUpdateSubscriptionsResponse" : {
        "type" : "object",
        "required" : [ "failCount", "invalidEmails", "invalidUserIds", "successCount", "validEmailFailures", "validUserIdFailures" ],
        "properties" : {
          "successCount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of users successfully updated"
          },
          "failCount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of users that weren't updated (due to invalid email or internal error)"
          },
          "invalidEmails" : {
            "type" : "array",
            "description" : "A list of emails that weren't updated because they are invalid",
            "items" : {
              "type" : "string"
            }
          },
          "invalidUserIds" : {
            "type" : "array",
            "description" : "A list of userIds that weren't updated because they are invalid",
            "items" : {
              "type" : "string"
            }
          },
          "validEmailFailures" : {
            "type" : "array",
            "description" : "A list of emails that weren't updated due to internal error",
            "items" : {
              "type" : "string"
            }
          },
          "validUserIdFailures" : {
            "type" : "array",
            "description" : "A list of userIds that weren't updated due to internal error",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkUpdateSubscriptionsRequest" : {
        "type" : "object",
        "required" : [ "updateSubscriptionsRequests" ],
        "properties" : {
          "updateSubscriptionsRequests" : {
            "type" : "array",
            "description" : "List of UpdateSubscriptionsRequests to process",
            "items" : {
              "$ref" : "#/components/schemas/UpdateSubscriptionsRequest"
            }
          }
        }
      },
      "UpdateEmailRequest" : {
        "type" : "object",
        "required" : [ "newEmail" ],
        "properties" : {
          "currentEmail" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "currentUserId" : {
            "type" : "string",
            "description" : "Optional userId. Either email or userId must be specified."
          },
          "newEmail" : {
            "type" : "string"
          }
        }
      },
      "GetUserFieldsResponse" : {
        "type" : "object",
        "required" : [ "fields" ],
        "properties" : {
          "fields" : {
            "type" : "object"
          }
        }
      },
      "Device" : {
        "type" : "object",
        "required" : [ "applicationName", "platform", "token" ],
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "platform" : {
            "type" : "string",
            "description" : "The device platform",
            "enum" : [ "APNS", "APNS_SANDBOX", "GCM" ]
          },
          "applicationName" : {
            "type" : "string",
            "description" : "The name of your push integration (refer to Integrations > Mobile Push in web app)"
          },
          "dataFields" : {
            "type" : "object"
          }
        }
      },
      "RegisterDeviceTokenRequest" : {
        "type" : "object",
        "required" : [ "device" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "device" : {
            "$ref" : "#/components/schemas/Device"
          },
          "userId" : {
            "type" : "string",
            "description" : "Register device for a user with specified userId. Either email or userId must be specified."
          },
          "preferUserId" : {
            "type" : "boolean",
            "example" : false,
            "description" : "Create a new user with the specified userId if the user does not exist yet."
          }
        }
      },
      "RegisterBrowserTokenRequest" : {
        "type" : "object",
        "required" : [ "browserToken" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "An email must be set unless a profile already exists with a userId set. In which case, a lookup from userId to email is performed."
          },
          "browserToken" : {
            "type" : "string",
            "description" : "This is provided by Firebase Messaging javascript API."
          },
          "userId" : {
            "type" : "string",
            "description" : "Optional userId, typically your database generated id. Can be used in events/track api."
          }
        }
      },
      "DisableDeviceRequest" : {
        "type" : "object",
        "required" : [ "token" ],
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "The device token"
          },
          "email" : {
            "type" : "string",
            "description" : "Specific email this device belongs to disable. Will disable device under all users with this device by default."
          },
          "userId" : {
            "type" : "string",
            "description" : "Specific userId this device belongs to disable. Will disable device under all users with this device by default."
          }
        }
      },
      "GetSentMessagesResponse" : {
        "type" : "object",
        "required" : [ "messages" ],
        "properties" : {
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SentMessage"
            }
          }
        }
      },
      "SentMessage" : {
        "type" : "object",
        "required" : [ "campaignId", "createdAt", "messageId", "templateId" ],
        "properties" : {
          "messageId" : {
            "type" : "string"
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "templateId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdAt" : {
            "type" : "string"
          }
        }
      },
      "UserRequest" : {
        "type" : "object",
        "required" : [ "email" ],
        "properties" : {
          "email" : {
            "type" : "string"
          }
        }
      },
      "TargetEmailRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "recipientEmail" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recipientEmail" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Fields to merge into email template"
          },
          "sendAt" : {
            "type" : "string",
            "description" : "Schedule the message for up to 365 days in the future. If set in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Metadata to pass back via webhooks. Not used for rendering"
          }
        }
      },
      "ListMetadataTablesResponse" : {
        "type" : "object",
        "required" : [ "results" ],
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Table"
            }
          }
        }
      },
      "Table" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "MetadataWithProperties" : {
        "type" : "object",
        "required" : [ "key", "lastModified", "size", "table", "value" ],
        "properties" : {
          "table" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModified" : {
            "type" : "integer",
            "format" : "int64"
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "PutMetadataRequest" : {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "type" : "object",
            "description" : "The JSON metadata value.  Max size is is 30kb."
          }
        }
      },
      "Listing" : {
        "type" : "object",
        "required" : [ "results" ],
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MetadataProperties"
            }
          },
          "nextMarker" : {
            "type" : "string"
          }
        }
      },
      "MetadataProperties" : {
        "type" : "object",
        "required" : [ "key", "lastModified", "size", "table" ],
        "properties" : {
          "table" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastModified" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ApiWebhookResponse" : {
        "type" : "object",
        "required" : [ "authType", "blastSendEnabled", "enabled", "endpoint", "id", "triggeredSendEnabled" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Webhook ID"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Enabled"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint"
          },
          "authType" : {
            "type" : "string",
            "description" : "Auth type"
          },
          "authToken" : {
            "type" : "string",
            "description" : "Auth token"
          },
          "triggeredSendEnabled" : {
            "type" : "boolean",
            "description" : "Triggered Send Enabled"
          },
          "blastSendEnabled" : {
            "type" : "boolean",
            "description" : "Blast Send Enabled"
          }
        }
      },
      "GetWebhooksResponse" : {
        "type" : "object",
        "required" : [ "webhooks" ],
        "properties" : {
          "webhooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApiWebhookResponse"
            }
          }
        }
      },
      "ApiWebhookModel" : {
        "type" : "object",
        "required" : [ "id" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Webhook ID"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Enabled"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint"
          },
          "authType" : {
            "type" : "string",
            "description" : "Auth type",
            "enum" : [ "NoAuth", "Basic", "OAuth2" ]
          },
          "authToken" : {
            "type" : "string",
            "description" : "Auth token"
          },
          "triggeredSendEnabled" : {
            "type" : "boolean",
            "description" : "Triggered Send Enabled"
          },
          "blastSendEnabled" : {
            "type" : "boolean",
            "description" : "Blast Send Enabled"
          }
        }
      },
      "CampaignDetails" : {
        "type" : "object",
        "required" : [ "campaignState", "createdAt", "createdByUserId", "id", "messageMedium", "name", "type", "updatedAt" ],
        "properties" : {
          "id" : {
            "type" : "number"
          },
          "createdAt" : {
            "type" : "integer"
          },
          "updatedAt" : {
            "type" : "integer"
          },
          "startAt" : {
            "type" : "integer"
          },
          "endedAt" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "templateId" : {
            "type" : "number"
          },
          "messageMedium" : {
            "type" : "string"
          },
          "createdByUserId" : {
            "type" : "string"
          },
          "campaignState" : {
            "type" : "string",
            "enum" : [ "Draft", "Ready", "Scheduled", "Running", "Finished", "Starting", "Aborted", "Recurring" ]
          },
          "listIds" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "suppressionListIds" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "sendSize" : {
            "type" : "number"
          },
          "recurringCampaignId" : {
            "type" : "number"
          },
          "workflowId" : {
            "type" : "number"
          },
          "labels" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "Blast", "Triggered" ]
          }
        }
      },
      "CampaignsResponse" : {
        "type" : "object",
        "required" : [ "campaigns" ],
        "properties" : {
          "campaigns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CampaignDetails"
            }
          }
        }
      },
      "TriggerCampaignRequest" : {
        "type" : "object",
        "required" : [ "campaignId" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "listIds" : {
            "type" : "array",
            "description" : "Lists to send to",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "suppressionListIds" : {
            "type" : "array",
            "description" : "Lists to suppress",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Fields to merge into handlebars context"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          }
        }
      },
      "CreateCampaignResponse" : {
        "type" : "object",
        "required" : [ "campaignId" ],
        "properties" : {
          "campaignId" : {
            "type" : "number"
          }
        }
      },
      "CreateCampaignRequest" : {
        "type" : "object",
        "required" : [ "listIds", "name", "templateId" ],
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "listIds" : {
            "type" : "array",
            "items" : {
              "type" : "number"
            }
          },
          "templateId" : {
            "type" : "number"
          },
          "suppressionListIds" : {
            "type" : "array",
            "description" : "Optional ids of lists of users that this campaign should not send emails to",
            "items" : {
              "type" : "number"
            }
          },
          "sendAt" : {
            "type" : "string",
            "description" : "When to send the message up to 7 days in the future. If in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "sendMode" : {
            "type" : "string",
            "description" : "Send campaign based on project time zone or recipient time zone",
            "enum" : [ "ProjectTimeZone", "RecipientTimeZone" ]
          },
          "startTimeZone" : {
            "type" : "string",
            "description" : "The starting time zone in for recipient time zone-based sends in IANA format (e.g. America/New_York, America/Los_Angeles, etc)"
          },
          "defaultTimeZone" : {
            "type" : "string",
            "description" : "The fallback time zone for recipient time zone-based sends if the recipient does not have time zone set in IANA format (e.g. America/New_York, America/Los_Angeles, etc)"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "JSON object with additional data used to render data feed fields in specified template"
          }
        }
      },
      "TargetSMSRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "recipientEmail" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recipientEmail" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Fields to merge into template"
          },
          "sendAt" : {
            "type" : "string",
            "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          }
        }
      },
      "TriggerWorkflowRequest" : {
        "type" : "object",
        "required" : [ "workflowId" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Trigger workflow for given email address. Trigger only with email OR listId (see below)"
          },
          "workflowId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Id of workflow to trigger"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Additional data associated triggering event"
          },
          "listId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "(Optional) Trigger the workflow for all users in a list (standard or dynamic)"
          }
        }
      },
      "ChannelDetails" : {
        "type" : "object",
        "required" : [ "channelType", "id", "messageMedium", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "channelType" : {
            "type" : "string",
            "description" : "Channel type",
            "enum" : [ "Marketing", "Transactional" ]
          },
          "messageMedium" : {
            "type" : "string",
            "description" : "Medium of this channel",
            "enum" : [ "Email", "Push", "SMS" ]
          }
        }
      },
      "ChannelsResponse" : {
        "type" : "object",
        "required" : [ "channels" ],
        "properties" : {
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelDetails"
            }
          }
        }
      },
      "TargetPushRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "recipientEmail" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recipientEmail" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "JSON object containing fields to merge into email template"
          },
          "sendAt" : {
            "type" : "string",
            "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          },
          "metadata" : {
            "type" : "object",
            "description" : "Metadata to pass back via system webhooks. Not used for rendering"
          }
        }
      },
      "TargetWebPushRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "recipientEmail" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recipientEmail" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Fields to merge into template"
          },
          "sendAt" : {
            "type" : "string",
            "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          }
        }
      },
      "GetListsResponse" : {
        "type" : "object",
        "required" : [ "lists" ],
        "properties" : {
          "lists" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ListDetails"
            }
          }
        }
      },
      "ListDetails" : {
        "type" : "object",
        "required" : [ "createdAt", "id", "listType", "name" ],
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "listType" : {
            "type" : "string",
            "enum" : [ "Standard", "Dynamic", "Suppression", "Internal" ]
          }
        }
      },
      "SubscribeRequest" : {
        "type" : "object",
        "required" : [ "listId", "subscribers" ],
        "properties" : {
          "listId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "subscribers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OptionalApiUser"
            }
          }
        }
      },
      "UnsubscribeRequest" : {
        "type" : "object",
        "required" : [ "listId", "subscribers" ],
        "properties" : {
          "listId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "subscribers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Unsubscriber"
            }
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "attribute unsubscribe to a campaign"
          },
          "channelUnsubscribe" : {
            "type" : "boolean",
            "description" : "Unsubscribe email from list's associated channel - essentially a global unsubscribe. (default: false)"
          }
        }
      },
      "Unsubscriber" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "string"
          }
        }
      },
      "CreateListResponse" : {
        "type" : "object",
        "required" : [ "listId" ],
        "properties" : {
          "listId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "CreateListRequest" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "ApiInAppMessage" : {
        "type" : "object",
        "required" : [ "content", "messageId" ],
        "properties" : {
          "messageId" : {
            "type" : "string"
          },
          "campaignId" : {
            "type" : "number"
          },
          "expiresAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "content" : {
            "$ref" : "#/components/schemas/InAppContentApi"
          },
          "customPayload" : {
            "type" : "object"
          }
        }
      },
      "ApiInAppMessagesResponse" : {
        "type" : "object",
        "required" : [ "inAppMessages" ],
        "properties" : {
          "inAppMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApiInAppMessage"
            }
          }
        }
      },
      "InAppContentApi" : {
        "type" : "object",
        "required" : [ "html", "inAppDisplaySettings" ],
        "properties" : {
          "html" : {
            "type" : "string"
          },
          "inAppDisplaySettings" : {
            "$ref" : "#/components/schemas/InAppDisplaySettings"
          }
        }
      },
      "InAppDisplaySetting" : {
        "type" : "object"
      },
      "InAppDisplaySettings" : {
        "type" : "object",
        "required" : [ "bottom", "left", "right", "top" ],
        "properties" : {
          "top" : {
            "$ref" : "#/components/schemas/InAppDisplaySetting"
          },
          "right" : {
            "$ref" : "#/components/schemas/InAppDisplaySetting"
          },
          "bottom" : {
            "$ref" : "#/components/schemas/InAppDisplaySetting"
          },
          "left" : {
            "$ref" : "#/components/schemas/InAppDisplaySetting"
          }
        }
      },
      "ApiTemplateResponse" : {
        "type" : "object",
        "required" : [ "createdAt", "creatorUserId", "messageTypeId", "name", "templateId", "updatedAt" ],
        "properties" : {
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Template ID"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date created"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date last updated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "creatorUserId" : {
            "type" : "string",
            "description" : "Creator email"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Message type ID"
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Campaign ID"
          },
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Client template ID. Used as a secondary key to reference the template"
          }
        }
      },
      "GetTemplatesResponse" : {
        "type" : "object",
        "required" : [ "templates" ],
        "properties" : {
          "templates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ApiTemplateResponse"
            }
          }
        }
      },
      "ApiTemplateEntry" : {
        "type" : "object",
        "required" : [ "templateId" ],
        "properties" : {
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Template ID"
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of campaign using this template"
          },
          "locales" : {
            "type" : "array",
            "description" : "Locales with content for this template",
            "items" : {
              "$ref" : "#/components/schemas/IterableLocale"
            }
          }
        }
      },
      "ClientTemplateIdResponse" : {
        "type" : "object",
        "required" : [ "templates" ],
        "properties" : {
          "templates" : {
            "type" : "array",
            "description" : "Templates that match client template id",
            "items" : {
              "$ref" : "#/components/schemas/ApiTemplateEntry"
            }
          }
        }
      },
      "IterableLocale" : {
        "type" : "object",
        "required" : [ "name" ],
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "ApiEmailTemplateModel" : {
        "type" : "object",
        "required" : [ "templateId" ],
        "properties" : {
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Email Template ID"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/ApiTemplateResponse"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "fromName" : {
            "type" : "string",
            "description" : "From name"
          },
          "fromEmail" : {
            "type" : "string",
            "description" : "From email (must be an authorized sender)"
          },
          "replyToEmail" : {
            "type" : "string",
            "description" : "Reply to email"
          },
          "subject" : {
            "type" : "string",
            "description" : "Subject"
          },
          "preheaderText" : {
            "type" : "string",
            "description" : "Preheader text"
          },
          "ccEmails" : {
            "type" : "array",
            "description" : "CC emails",
            "items" : {
              "type" : "string"
            }
          },
          "bccEmails" : {
            "type" : "array",
            "description" : "BCC emails",
            "items" : {
              "type" : "string"
            }
          },
          "html" : {
            "type" : "string",
            "description" : "HTML contents"
          },
          "plainText" : {
            "type" : "string",
            "description" : "Plain text contents"
          },
          "googleAnalyticsCampaignName" : {
            "type" : "string",
            "description" : "Google analytics utm_campaign value"
          },
          "linkParams" : {
            "type" : "array",
            "description" : "Parameters to append to each URL in html contents",
            "items" : {
              "$ref" : "#/components/schemas/LinkParam"
            }
          },
          "dataFeedId" : {
            "type" : "number",
            "description" : "[Deprecated - use dataFeedIds instead] Id for data feed used in template rendering"
          },
          "dataFeedIds" : {
            "type" : "array",
            "description" : "Ids for data feeds used in template rendering",
            "items" : {
              "type" : "number"
            }
          },
          "cacheDataFeed" : {
            "type" : "number",
            "description" : "Cache data feed lookups for 1 hour"
          },
          "mergeDataFeedContext" : {
            "type" : "number",
            "description" : "Merge data feed contents into user context, so fields be referenced by {{field}} instead of [[field]]"
          },
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Client template Id. Used as a secondary key to reference the template"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "number",
            "description" : "Message Type Id"
          },
          "creatorUserId" : {
            "type" : "string",
            "description" : "Creator User Id"
          }
        }
      },
      "LinkParam" : {
        "type" : "object",
        "required" : [ "key", "value" ],
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Link parameter key"
          },
          "value" : {
            "type" : "string",
            "description" : "Link parameter value"
          }
        }
      },
      "UpsertEmailTemplateModel" : {
        "type" : "object",
        "required" : [ "clientTemplateId" ],
        "properties" : {
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "fromName" : {
            "type" : "string",
            "description" : "From name"
          },
          "fromEmail" : {
            "type" : "string",
            "description" : "From email (must be an authorized sender)"
          },
          "replyToEmail" : {
            "type" : "string",
            "description" : "Reply to email"
          },
          "subject" : {
            "type" : "string",
            "description" : "Subject"
          },
          "preheaderText" : {
            "type" : "string",
            "description" : "Preheader text"
          },
          "ccEmails" : {
            "type" : "array",
            "description" : "CC emails",
            "items" : {
              "type" : "string"
            }
          },
          "bccEmails" : {
            "type" : "array",
            "description" : "BCC emails",
            "items" : {
              "type" : "string"
            }
          },
          "html" : {
            "type" : "string",
            "description" : "HTML contents"
          },
          "plainText" : {
            "type" : "string",
            "description" : "Plain text contents"
          },
          "googleAnalyticsCampaignName" : {
            "type" : "string",
            "description" : "Google analytics utm_campaign value"
          },
          "linkParams" : {
            "type" : "array",
            "description" : "Parameters to append to each URL in html contents",
            "items" : {
              "$ref" : "#/components/schemas/LinkParam"
            }
          },
          "dataFeedId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "[Deprecated - use dataFeedIds instead] Id for data feed used in template rendering"
          },
          "dataFeedIds" : {
            "type" : "array",
            "description" : "Ids for data feeds used in template rendering",
            "items" : {
              "type" : "number"
            }
          },
          "cacheDataFeed" : {
            "type" : "number",
            "description" : "Cache data feed lookups for 1 hour"
          },
          "mergeDataFeedContext" : {
            "type" : "boolean",
            "description" : "Merge data feed contents into user context, so fields be referenced by {{field}} instead of [[field]]"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Message Type Id"
          },
          "creatorUserId" : {
            "type" : "string",
            "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
          }
        }
      },
      "ApiPushTemplateModel" : {
        "type" : "object",
        "required" : [ "templateId" ],
        "properties" : {
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Push template ID"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date created [Read only]"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date last updated [Read only]"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "title" : {
            "type" : "string",
            "description" : "Push message title"
          },
          "message" : {
            "type" : "string",
            "description" : "Push message"
          },
          "payload" : {
            "type" : "object",
            "description" : "Payload to send with push notification"
          },
          "badge" : {
            "type" : "string",
            "description" : "Badge to set for push notification"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Message Type Id"
          },
          "sound" : {
            "type" : "string",
            "description" : "Sound"
          },
          "deeplink" : {
            "$ref" : "#/components/schemas/DeeplinkURI"
          },
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Client template Id. Used as a secondary key to reference the template"
          },
          "campaignId" : {
            "type" : "number",
            "description" : "Campaign ID"
          }
        }
      },
      "DeeplinkURI" : {
        "type" : "object",
        "properties" : {
          "ios" : {
            "type" : "string"
          },
          "android" : {
            "type" : "string"
          }
        }
      },
      "JsObject" : {
        "type" : "object",
        "required" : [ "fields", "underlying", "value" ],
        "properties" : {
          "underlying" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/JsValue"
            }
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Tuple2StringJsValue"
            }
          },
          "value" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/JsValue"
            }
          }
        }
      },
      "JsValue" : {
        "type" : "object"
      },
      "Tuple2StringJsValue" : {
        "type" : "object",
        "required" : [ "_1", "_2" ],
        "properties" : {
          "_1" : {
            "type" : "string"
          },
          "_2" : {
            "$ref" : "#/components/schemas/JsValue"
          }
        }
      },
      "UpsertPushTemplateModel" : {
        "type" : "object",
        "required" : [ "clientTemplateId" ],
        "properties" : {
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "title" : {
            "type" : "string",
            "description" : "Push message title"
          },
          "message" : {
            "type" : "string",
            "description" : "Push message"
          },
          "payload" : {
            "$ref" : "#/components/schemas/JsObject"
          },
          "badge" : {
            "type" : "string",
            "description" : "Badge to set for push notification"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Message Type Id"
          },
          "sound" : {
            "type" : "string",
            "description" : "Sound"
          },
          "deeplink" : {
            "$ref" : "#/components/schemas/DeeplinkURI"
          },
          "creatorUserId" : {
            "type" : "string",
            "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
          }
        }
      },
      "ApiSMSTemplateModel" : {
        "type" : "object",
        "required" : [ "templateId" ],
        "properties" : {
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "SMS template ID"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date created [Read only]"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date last updated [Read only]"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "message" : {
            "type" : "string",
            "description" : "SMS message"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Message Type Id"
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "Image Url"
          },
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Client template Id. Used as a secondary key to reference the template"
          },
          "campaignId" : {
            "type" : "number",
            "description" : "Campaign ID"
          }
        }
      },
      "UpsertSMSTemplateModel" : {
        "type" : "object",
        "required" : [ "clientTemplateId" ],
        "properties" : {
          "clientTemplateId" : {
            "type" : "string",
            "description" : "Id used by the client to identify a template. If multiple templates exist with the Id, all will be updated"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the template"
          },
          "message" : {
            "type" : "string",
            "description" : "SMS message"
          },
          "locale" : {
            "$ref" : "#/components/schemas/IterableLocale"
          },
          "messageTypeId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Message Type Id"
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "Image Url"
          },
          "creatorUserId" : {
            "type" : "string",
            "description" : "Specify a specific creator user id (email). The email must be an existing member of the project. Defaults to the organization creator."
          }
        }
      },
      "BulkTrackResponse" : {
        "type" : "object",
        "required" : [ "failCount", "successCount" ],
        "properties" : {
          "successCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "failCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "invalidEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "invalidUserIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "disallowedEventNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkTrackRequest" : {
        "type" : "object",
        "required" : [ "events" ],
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrackRequest"
            }
          }
        }
      },
      "TrackRequest" : {
        "type" : "object",
        "required" : [ "eventName" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "eventName" : {
            "type" : "string",
            "description" : "Name of event"
          },
          "id" : {
            "type" : "string",
            "description" : "Optional event id. If an event exists with that id, the event will be updated. If none is specified, a new id will automatically be generated and returned."
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Time event happened. Set to the time event was received if unspecified. Expects a unix timestamp."
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Additional data associated with event (i.e. item id, item amount)"
          },
          "userId" : {
            "type" : "string",
            "description" : "userId that was passed into the updateUser call"
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Campaign tied to conversion"
          },
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Template id"
          }
        }
      },
      "WebPushClickEventRequest" : {
        "type" : "object",
        "required" : [ "messageId" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "userId" : {
            "type" : "string",
            "description" : "userId that was passed into the updateUser call"
          },
          "messageId" : {
            "type" : "string"
          },
          "campaignId" : {
            "type" : "number"
          },
          "templateId" : {
            "type" : "number"
          }
        }
      },
      "TrackPushOpenRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "messageId" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "userId" : {
            "type" : "string",
            "description" : "userId that was passed into the updateUser call"
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Campaign tied to open"
          },
          "templateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Used in AB testing attribution"
          },
          "messageId" : {
            "type" : "string",
            "description" : "Iterable-generated Message ID"
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Timestamp of the open event. If unspecified, set to the time event was received  Expects a unix timestamp."
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Additional data associated with event"
          }
        }
      },
      "InAppEventRequest" : {
        "type" : "object",
        "required" : [ "messageId" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "userId" : {
            "type" : "string",
            "description" : "userId that was passed into the updateUser call"
          },
          "messageId" : {
            "type" : "string"
          }
        }
      },
      "InAppClickRequest" : {
        "type" : "object",
        "required" : [ "messageId" ],
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Either email or userId must be passed in to identify the user. If both are passed in, email takes precedence."
          },
          "userId" : {
            "type" : "string",
            "description" : "userId that was passed into the updateUser call"
          },
          "messageId" : {
            "type" : "string"
          },
          "clickedUrl" : {
            "type" : "string",
            "description" : "The link url clicked"
          }
        }
      },
      "GetEventsResponse" : {
        "type" : "object",
        "required" : [ "events" ],
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "ExperimentMetricsResponse" : {
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "string"
          },
          "rows" : {
            "type" : "array",
            "description" : "Rows of the report.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TargetInAppRequest" : {
        "type" : "object",
        "required" : [ "campaignId", "recipientEmail" ],
        "properties" : {
          "campaignId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "recipientEmail" : {
            "type" : "string"
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Fields to merge into email template"
          },
          "sendAt" : {
            "type" : "string",
            "description" : "Schedule the message for up to 365 days in the future. If set in the past, message is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC"
          },
          "allowRepeatMarketingSends" : {
            "type" : "boolean",
            "description" : "Allow repeat marketing sends? Defaults to true."
          }
        }
      },
      "CommerceItem" : {
        "type" : "object",
        "required" : [ "id", "name", "price", "quantity" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Unique product identifier"
          },
          "sku" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "categories" : {
            "type" : "array",
            "description" : "Categories this product belongs to. It can belong to multiple categories. Each category is a breadcrumb in list form.",
            "items" : {
              "type" : "string"
            }
          },
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "URL to an image of the item."
          },
          "url" : {
            "type" : "string",
            "description" : "URL to the item."
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Additional item properties"
          }
        }
      },
      "UpdateCartRequest" : {
        "type" : "object",
        "required" : [ "items", "user" ],
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/ApiUserUpdateRequest"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommerceItem"
            }
          }
        }
      },
      "TrackPurchaseRequest" : {
        "type" : "object",
        "required" : [ "items", "total", "user" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Optional purchase id. If a purchase exists with that id, the purchase will be updated. If none is specified, a new id will automatically be generated and returned."
          },
          "user" : {
            "$ref" : "#/components/schemas/ApiUserUpdateRequest"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CommerceItem"
            }
          },
          "campaignId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "templateId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Used in AB testing attribution"
          },
          "total" : {
            "type" : "number",
            "format" : "double",
            "description" : "Total order dollar amount"
          },
          "createdAt" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Time event happened. Set to the time event was received if unspecified. Expects a Unix timestamp."
          },
          "dataFields" : {
            "type" : "object",
            "description" : "Additional fields to be tracked."
          }
        }
      }
    }
  }
}
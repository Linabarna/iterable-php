<?php
/**
 * CreateCampaignRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  IterableIA
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Iterable API
 *
 * Iterable API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: idihya@webpick.info
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IterableIA\Model;

use \ArrayAccess;
use \IterableIA\ObjectSerializer;

/**
 * CreateCampaignRequest Class Doc Comment
 *
 * @category Class
 * @package  IterableIA
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateCampaignRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateCampaignRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'list_ids' => 'float[]',
'template_id' => 'float',
'suppression_list_ids' => 'float[]',
'send_at' => 'string',
'send_mode' => 'string',
'start_time_zone' => 'string',
'default_time_zone' => 'string',
'data_fields' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'list_ids' => null,
'template_id' => null,
'suppression_list_ids' => null,
'send_at' => null,
'send_mode' => null,
'start_time_zone' => null,
'default_time_zone' => null,
'data_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'list_ids' => 'listIds',
'template_id' => 'templateId',
'suppression_list_ids' => 'suppressionListIds',
'send_at' => 'sendAt',
'send_mode' => 'sendMode',
'start_time_zone' => 'startTimeZone',
'default_time_zone' => 'defaultTimeZone',
'data_fields' => 'dataFields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'list_ids' => 'setListIds',
'template_id' => 'setTemplateId',
'suppression_list_ids' => 'setSuppressionListIds',
'send_at' => 'setSendAt',
'send_mode' => 'setSendMode',
'start_time_zone' => 'setStartTimeZone',
'default_time_zone' => 'setDefaultTimeZone',
'data_fields' => 'setDataFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'list_ids' => 'getListIds',
'template_id' => 'getTemplateId',
'suppression_list_ids' => 'getSuppressionListIds',
'send_at' => 'getSendAt',
'send_mode' => 'getSendMode',
'start_time_zone' => 'getStartTimeZone',
'default_time_zone' => 'getDefaultTimeZone',
'data_fields' => 'getDataFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SEND_MODE_PROJECT_TIME_ZONE = 'ProjectTimeZone';
const SEND_MODE_RECIPIENT_TIME_ZONE = 'RecipientTimeZone';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendModeAllowableValues()
    {
        return [
            self::SEND_MODE_PROJECT_TIME_ZONE,
self::SEND_MODE_RECIPIENT_TIME_ZONE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['list_ids'] = isset($data['list_ids']) ? $data['list_ids'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['suppression_list_ids'] = isset($data['suppression_list_ids']) ? $data['suppression_list_ids'] : null;
        $this->container['send_at'] = isset($data['send_at']) ? $data['send_at'] : null;
        $this->container['send_mode'] = isset($data['send_mode']) ? $data['send_mode'] : null;
        $this->container['start_time_zone'] = isset($data['start_time_zone']) ? $data['start_time_zone'] : null;
        $this->container['default_time_zone'] = isset($data['default_time_zone']) ? $data['default_time_zone'] : null;
        $this->container['data_fields'] = isset($data['data_fields']) ? $data['data_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['list_ids'] === null) {
            $invalidProperties[] = "'list_ids' can't be null";
        }
        if ($this->container['template_id'] === null) {
            $invalidProperties[] = "'template_id' can't be null";
        }
        $allowedValues = $this->getSendModeAllowableValues();
        if (!is_null($this->container['send_mode']) && !in_array($this->container['send_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets list_ids
     *
     * @return float[]
     */
    public function getListIds()
    {
        return $this->container['list_ids'];
    }

    /**
     * Sets list_ids
     *
     * @param float[] $list_ids list_ids
     *
     * @return $this
     */
    public function setListIds($list_ids)
    {
        $this->container['list_ids'] = $list_ids;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return float
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param float $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets suppression_list_ids
     *
     * @return float[]
     */
    public function getSuppressionListIds()
    {
        return $this->container['suppression_list_ids'];
    }

    /**
     * Sets suppression_list_ids
     *
     * @param float[] $suppression_list_ids Optional ids of lists of users that this campaign should not send emails to
     *
     * @return $this
     */
    public function setSuppressionListIds($suppression_list_ids)
    {
        $this->container['suppression_list_ids'] = $suppression_list_ids;

        return $this;
    }

    /**
     * Gets send_at
     *
     * @return string
     */
    public function getSendAt()
    {
        return $this->container['send_at'];
    }

    /**
     * Sets send_at
     *
     * @param string $send_at When to send the message up to 7 days in the future. If in the past, email is sent immediately. Format is YYYY-MM-DD HH:MM:SS in UTC
     *
     * @return $this
     */
    public function setSendAt($send_at)
    {
        $this->container['send_at'] = $send_at;

        return $this;
    }

    /**
     * Gets send_mode
     *
     * @return string
     */
    public function getSendMode()
    {
        return $this->container['send_mode'];
    }

    /**
     * Sets send_mode
     *
     * @param string $send_mode Send campaign based on project time zone or recipient time zone
     *
     * @return $this
     */
    public function setSendMode($send_mode)
    {
        $allowedValues = $this->getSendModeAllowableValues();
        if (!is_null($send_mode) && !in_array($send_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_mode'] = $send_mode;

        return $this;
    }

    /**
     * Gets start_time_zone
     *
     * @return string
     */
    public function getStartTimeZone()
    {
        return $this->container['start_time_zone'];
    }

    /**
     * Sets start_time_zone
     *
     * @param string $start_time_zone The starting time zone in for recipient time zone-based sends in IANA format (e.g. America/New_York, America/Los_Angeles, etc)
     *
     * @return $this
     */
    public function setStartTimeZone($start_time_zone)
    {
        $this->container['start_time_zone'] = $start_time_zone;

        return $this;
    }

    /**
     * Gets default_time_zone
     *
     * @return string
     */
    public function getDefaultTimeZone()
    {
        return $this->container['default_time_zone'];
    }

    /**
     * Sets default_time_zone
     *
     * @param string $default_time_zone The fallback time zone for recipient time zone-based sends if the recipient does not have time zone set in IANA format (e.g. America/New_York, America/Los_Angeles, etc)
     *
     * @return $this
     */
    public function setDefaultTimeZone($default_time_zone)
    {
        $this->container['default_time_zone'] = $default_time_zone;

        return $this;
    }

    /**
     * Gets data_fields
     *
     * @return object
     */
    public function getDataFields()
    {
        return $this->container['data_fields'];
    }

    /**
     * Sets data_fields
     *
     * @param object $data_fields JSON object with additional data used to render data feed fields in specified template
     *
     * @return $this
     */
    public function setDataFields($data_fields)
    {
        $this->container['data_fields'] = $data_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

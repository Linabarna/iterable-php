<?php
/**
 * CampaignDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  IterableIA\Iterable
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Iterable API
 *
 * Iterable API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: abderrahmane.idihya@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IterableIA\Iterable\Model;

use \ArrayAccess;
use \IterableIA\Iterable\ObjectSerializer;

/**
 * CampaignDetails Class Doc Comment
 *
 * @category Class
 * @package  IterableIA\Iterable
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
'created_at' => 'int',
'updated_at' => 'int',
'start_at' => 'int',
'ended_at' => 'int',
'name' => 'string',
'template_id' => 'float',
'message_medium' => 'string',
'created_by_user_id' => 'string',
'campaign_state' => 'string',
'list_ids' => 'float[]',
'suppression_list_ids' => 'float[]',
'send_size' => 'float',
'recurring_campaign_id' => 'float',
'workflow_id' => 'float',
'labels' => 'string[]',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'created_at' => 'int64',
'updated_at' => 'int64',
'start_at' => 'int64',
'ended_at' => 'int64',
'name' => null,
'template_id' => null,
'message_medium' => null,
'created_by_user_id' => null,
'campaign_state' => null,
'list_ids' => null,
'suppression_list_ids' => null,
'send_size' => null,
'recurring_campaign_id' => null,
'workflow_id' => null,
'labels' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'start_at' => 'startAt',
'ended_at' => 'endedAt',
'name' => 'name',
'template_id' => 'templateId',
'message_medium' => 'messageMedium',
'created_by_user_id' => 'createdByUserId',
'campaign_state' => 'campaignState',
'list_ids' => 'listIds',
'suppression_list_ids' => 'suppressionListIds',
'send_size' => 'sendSize',
'recurring_campaign_id' => 'recurringCampaignId',
'workflow_id' => 'workflowId',
'labels' => 'labels',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'start_at' => 'setStartAt',
'ended_at' => 'setEndedAt',
'name' => 'setName',
'template_id' => 'setTemplateId',
'message_medium' => 'setMessageMedium',
'created_by_user_id' => 'setCreatedByUserId',
'campaign_state' => 'setCampaignState',
'list_ids' => 'setListIds',
'suppression_list_ids' => 'setSuppressionListIds',
'send_size' => 'setSendSize',
'recurring_campaign_id' => 'setRecurringCampaignId',
'workflow_id' => 'setWorkflowId',
'labels' => 'setLabels',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'start_at' => 'getStartAt',
'ended_at' => 'getEndedAt',
'name' => 'getName',
'template_id' => 'getTemplateId',
'message_medium' => 'getMessageMedium',
'created_by_user_id' => 'getCreatedByUserId',
'campaign_state' => 'getCampaignState',
'list_ids' => 'getListIds',
'suppression_list_ids' => 'getSuppressionListIds',
'send_size' => 'getSendSize',
'recurring_campaign_id' => 'getRecurringCampaignId',
'workflow_id' => 'getWorkflowId',
'labels' => 'getLabels',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CAMPAIGN_STATE_DRAFT = 'Draft';
const CAMPAIGN_STATE_READY = 'Ready';
const CAMPAIGN_STATE_SCHEDULED = 'Scheduled';
const CAMPAIGN_STATE_RUNNING = 'Running';
const CAMPAIGN_STATE_FINISHED = 'Finished';
const CAMPAIGN_STATE_STARTING = 'Starting';
const CAMPAIGN_STATE_ABORTED = 'Aborted';
const CAMPAIGN_STATE_RECURRING = 'Recurring';
const TYPE_BLAST = 'Blast';
const TYPE_TRIGGERED = 'Triggered';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCampaignStateAllowableValues()
    {
        return [
            self::CAMPAIGN_STATE_DRAFT,
self::CAMPAIGN_STATE_READY,
self::CAMPAIGN_STATE_SCHEDULED,
self::CAMPAIGN_STATE_RUNNING,
self::CAMPAIGN_STATE_FINISHED,
self::CAMPAIGN_STATE_STARTING,
self::CAMPAIGN_STATE_ABORTED,
self::CAMPAIGN_STATE_RECURRING,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BLAST,
self::TYPE_TRIGGERED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['start_at'] = isset($data['start_at']) ? $data['start_at'] : null;
        $this->container['ended_at'] = isset($data['ended_at']) ? $data['ended_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['message_medium'] = isset($data['message_medium']) ? $data['message_medium'] : null;
        $this->container['created_by_user_id'] = isset($data['created_by_user_id']) ? $data['created_by_user_id'] : null;
        $this->container['campaign_state'] = isset($data['campaign_state']) ? $data['campaign_state'] : null;
        $this->container['list_ids'] = isset($data['list_ids']) ? $data['list_ids'] : null;
        $this->container['suppression_list_ids'] = isset($data['suppression_list_ids']) ? $data['suppression_list_ids'] : null;
        $this->container['send_size'] = isset($data['send_size']) ? $data['send_size'] : null;
        $this->container['recurring_campaign_id'] = isset($data['recurring_campaign_id']) ? $data['recurring_campaign_id'] : null;
        $this->container['workflow_id'] = isset($data['workflow_id']) ? $data['workflow_id'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['message_medium'] === null) {
            $invalidProperties[] = "'message_medium' can't be null";
        }
        if ($this->container['created_by_user_id'] === null) {
            $invalidProperties[] = "'created_by_user_id' can't be null";
        }
        if ($this->container['campaign_state'] === null) {
            $invalidProperties[] = "'campaign_state' can't be null";
        }
        $allowedValues = $this->getCampaignStateAllowableValues();
        if (!is_null($this->container['campaign_state']) && !in_array($this->container['campaign_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'campaign_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return int
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param int $start_at start_at
     *
     * @return $this
     */
    public function setStartAt($start_at)
    {
        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets ended_at
     *
     * @return int
     */
    public function getEndedAt()
    {
        return $this->container['ended_at'];
    }

    /**
     * Sets ended_at
     *
     * @param int $ended_at ended_at
     *
     * @return $this
     */
    public function setEndedAt($ended_at)
    {
        $this->container['ended_at'] = $ended_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return float
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param float $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets message_medium
     *
     * @return string
     */
    public function getMessageMedium()
    {
        return $this->container['message_medium'];
    }

    /**
     * Sets message_medium
     *
     * @param string $message_medium message_medium
     *
     * @return $this
     */
    public function setMessageMedium($message_medium)
    {
        $this->container['message_medium'] = $message_medium;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string $created_by_user_id created_by_user_id
     *
     * @return $this
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets campaign_state
     *
     * @return string
     */
    public function getCampaignState()
    {
        return $this->container['campaign_state'];
    }

    /**
     * Sets campaign_state
     *
     * @param string $campaign_state campaign_state
     *
     * @return $this
     */
    public function setCampaignState($campaign_state)
    {
        $allowedValues = $this->getCampaignStateAllowableValues();
        if (!in_array($campaign_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'campaign_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['campaign_state'] = $campaign_state;

        return $this;
    }

    /**
     * Gets list_ids
     *
     * @return float[]
     */
    public function getListIds()
    {
        return $this->container['list_ids'];
    }

    /**
     * Sets list_ids
     *
     * @param float[] $list_ids list_ids
     *
     * @return $this
     */
    public function setListIds($list_ids)
    {
        $this->container['list_ids'] = $list_ids;

        return $this;
    }

    /**
     * Gets suppression_list_ids
     *
     * @return float[]
     */
    public function getSuppressionListIds()
    {
        return $this->container['suppression_list_ids'];
    }

    /**
     * Sets suppression_list_ids
     *
     * @param float[] $suppression_list_ids suppression_list_ids
     *
     * @return $this
     */
    public function setSuppressionListIds($suppression_list_ids)
    {
        $this->container['suppression_list_ids'] = $suppression_list_ids;

        return $this;
    }

    /**
     * Gets send_size
     *
     * @return float
     */
    public function getSendSize()
    {
        return $this->container['send_size'];
    }

    /**
     * Sets send_size
     *
     * @param float $send_size send_size
     *
     * @return $this
     */
    public function setSendSize($send_size)
    {
        $this->container['send_size'] = $send_size;

        return $this;
    }

    /**
     * Gets recurring_campaign_id
     *
     * @return float
     */
    public function getRecurringCampaignId()
    {
        return $this->container['recurring_campaign_id'];
    }

    /**
     * Sets recurring_campaign_id
     *
     * @param float $recurring_campaign_id recurring_campaign_id
     *
     * @return $this
     */
    public function setRecurringCampaignId($recurring_campaign_id)
    {
        $this->container['recurring_campaign_id'] = $recurring_campaign_id;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return float
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param float $workflow_id workflow_id
     *
     * @return $this
     */
    public function setWorkflowId($workflow_id)
    {
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * BulkUpdateSubscriptionsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  IterableIA
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Iterable API
 *
 * Iterable API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: idihya@webpick.info
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IterableIA\Model;

use \ArrayAccess;
use \IterableIA\ObjectSerializer;

/**
 * BulkUpdateSubscriptionsResponse Class Doc Comment
 *
 * @category Class
 * @package  IterableIA
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkUpdateSubscriptionsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BulkUpdateSubscriptionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success_count' => 'int',
'fail_count' => 'int',
'invalid_emails' => 'string[]',
'invalid_user_ids' => 'string[]',
'valid_email_failures' => 'string[]',
'valid_user_id_failures' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success_count' => 'int64',
'fail_count' => 'int64',
'invalid_emails' => null,
'invalid_user_ids' => null,
'valid_email_failures' => null,
'valid_user_id_failures' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success_count' => 'successCount',
'fail_count' => 'failCount',
'invalid_emails' => 'invalidEmails',
'invalid_user_ids' => 'invalidUserIds',
'valid_email_failures' => 'validEmailFailures',
'valid_user_id_failures' => 'validUserIdFailures'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success_count' => 'setSuccessCount',
'fail_count' => 'setFailCount',
'invalid_emails' => 'setInvalidEmails',
'invalid_user_ids' => 'setInvalidUserIds',
'valid_email_failures' => 'setValidEmailFailures',
'valid_user_id_failures' => 'setValidUserIdFailures'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success_count' => 'getSuccessCount',
'fail_count' => 'getFailCount',
'invalid_emails' => 'getInvalidEmails',
'invalid_user_ids' => 'getInvalidUserIds',
'valid_email_failures' => 'getValidEmailFailures',
'valid_user_id_failures' => 'getValidUserIdFailures'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success_count'] = isset($data['success_count']) ? $data['success_count'] : null;
        $this->container['fail_count'] = isset($data['fail_count']) ? $data['fail_count'] : null;
        $this->container['invalid_emails'] = isset($data['invalid_emails']) ? $data['invalid_emails'] : null;
        $this->container['invalid_user_ids'] = isset($data['invalid_user_ids']) ? $data['invalid_user_ids'] : null;
        $this->container['valid_email_failures'] = isset($data['valid_email_failures']) ? $data['valid_email_failures'] : null;
        $this->container['valid_user_id_failures'] = isset($data['valid_user_id_failures']) ? $data['valid_user_id_failures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['success_count'] === null) {
            $invalidProperties[] = "'success_count' can't be null";
        }
        if ($this->container['fail_count'] === null) {
            $invalidProperties[] = "'fail_count' can't be null";
        }
        if ($this->container['invalid_emails'] === null) {
            $invalidProperties[] = "'invalid_emails' can't be null";
        }
        if ($this->container['invalid_user_ids'] === null) {
            $invalidProperties[] = "'invalid_user_ids' can't be null";
        }
        if ($this->container['valid_email_failures'] === null) {
            $invalidProperties[] = "'valid_email_failures' can't be null";
        }
        if ($this->container['valid_user_id_failures'] === null) {
            $invalidProperties[] = "'valid_user_id_failures' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success_count
     *
     * @return int
     */
    public function getSuccessCount()
    {
        return $this->container['success_count'];
    }

    /**
     * Sets success_count
     *
     * @param int $success_count Number of users successfully updated
     *
     * @return $this
     */
    public function setSuccessCount($success_count)
    {
        $this->container['success_count'] = $success_count;

        return $this;
    }

    /**
     * Gets fail_count
     *
     * @return int
     */
    public function getFailCount()
    {
        return $this->container['fail_count'];
    }

    /**
     * Sets fail_count
     *
     * @param int $fail_count Number of users that weren't updated (due to invalid email or internal error)
     *
     * @return $this
     */
    public function setFailCount($fail_count)
    {
        $this->container['fail_count'] = $fail_count;

        return $this;
    }

    /**
     * Gets invalid_emails
     *
     * @return string[]
     */
    public function getInvalidEmails()
    {
        return $this->container['invalid_emails'];
    }

    /**
     * Sets invalid_emails
     *
     * @param string[] $invalid_emails A list of emails that weren't updated because they are invalid
     *
     * @return $this
     */
    public function setInvalidEmails($invalid_emails)
    {
        $this->container['invalid_emails'] = $invalid_emails;

        return $this;
    }

    /**
     * Gets invalid_user_ids
     *
     * @return string[]
     */
    public function getInvalidUserIds()
    {
        return $this->container['invalid_user_ids'];
    }

    /**
     * Sets invalid_user_ids
     *
     * @param string[] $invalid_user_ids A list of userIds that weren't updated because they are invalid
     *
     * @return $this
     */
    public function setInvalidUserIds($invalid_user_ids)
    {
        $this->container['invalid_user_ids'] = $invalid_user_ids;

        return $this;
    }

    /**
     * Gets valid_email_failures
     *
     * @return string[]
     */
    public function getValidEmailFailures()
    {
        return $this->container['valid_email_failures'];
    }

    /**
     * Sets valid_email_failures
     *
     * @param string[] $valid_email_failures A list of emails that weren't updated due to internal error
     *
     * @return $this
     */
    public function setValidEmailFailures($valid_email_failures)
    {
        $this->container['valid_email_failures'] = $valid_email_failures;

        return $this;
    }

    /**
     * Gets valid_user_id_failures
     *
     * @return string[]
     */
    public function getValidUserIdFailures()
    {
        return $this->container['valid_user_id_failures'];
    }

    /**
     * Sets valid_user_id_failures
     *
     * @param string[] $valid_user_id_failures A list of userIds that weren't updated due to internal error
     *
     * @return $this
     */
    public function setValidUserIdFailures($valid_user_id_failures)
    {
        $this->container['valid_user_id_failures'] = $valid_user_id_failures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
